crepl -Istdio,string 'if(!strcmp("text","text")){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'printf("hello\n");'
crepl -Istdio,string 'if(!strcmp("text","text")){printf("true\n");}else{printf("false\n");}'
crepl -Istdio,string 'char * string1="text"; char * string2="text"; if(!strcmp(string1,string2)){printf("true\n");}else{printf("false\n");}'
crepl -Istdio,string 'char * string="text"; printf("%d\n", strlen(string) );'
crepl -Istdio 'char c='\''a'\''; printf("%c\n", c); int i= (int) c; printf("%d\n", i);'
crepl -Istdio 'char * str="text"; char * copy; int i=0; while(str[i] != '\''\0'\''){copy[i]=str[i]; i++;} printf("%s\n", copy);'
crepl -Istdio 'float a=1; float b=3; printf("%f\n", a / b);'
crepl -Istdio 'float a=1; float b=3; printf("%.1f\n", a / b);'
crepl -Istdio,unistd 'char *password = getpass("enter password : "); printf("%s\n", password);'
time crepl -Istdio 'double i; for(i=0; i < 10000000; i++){printf("%.0f\n", i * i);}'
crepl -Istdio 'char * text[] = {"line 1","line 2","line 3"}; for(int i=0; i < (sizeof(text)/sizeof(text[0])) ; i++) {printf("%s\n", text[i]);}'
crepl -Istdio 'char * text[] = {"line 1","line 2","line 3"}; for(int i=0; i < (sizeof(text)/sizeof(text[0])) ; i++) {printf("%s\n", text[i]);}'
crepl -Istdio 'printf("hello\n");'
crepl -Istdio,errno 'printf("hello\n%d\n", errno);'
crepl -Istdio,errno 'printf("hello\n%d\n", errno);'
crepl -Istdio 'if(""){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if("a"){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if("0"){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(1){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(0){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(-1){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(NULL){printf("true\n");}else{printf("false\n");}'
crepl -lX11 -Istdio,X11/Xlib 'Display *display; display=XOpenDisplay(NULL); printf("%s\n", "text");'
crepl -Istdio 'if (1 < 2 < 3) {printf("true\n");} else {printf("false\n");}'
crepl -Istdio 'if (1 < 2 == 2 < 3) {printf("true\n");} else {printf("false\n");}'
crepl -Istdio,string 'int len = strlen("hello world\n"); char string[16]; sprintf(string, "hello world\n");'
crepl -Istdio,string 'int len = strlen("hello world\n"); char string[len]; sprintf(string, "hello world\n");'
crepl -Istdio,string 'char string[strlen("hello world\n")]; sprintf(string, "hello world\n");'
crepl -Istdio,string 'char string[strlen("hello world\n")]; sprintf(string, "hello world\n"); printf("%s", string);'
ackc --ignore-dir="0headers_crepl" 'EXTERN_C' | less
ackc --ignore-dir "0headers_crepl" 'EXTERN_C' | less
ackc --ignore-dir 0headers_crepl 'EXTERN_C' | less
crepl -Istdio 'struct my_struct { int a; int b; } test; test.a = 5; test.b= 10; printf("%d\n%d\n", test.a, test.b);'
crepl -Istdio 'typedef struct { int a; int b; } my_struct; my_struct test; test.a = 5; test.b = 10; printf("%d\n%d\n", test.a, test.b);'
crepl -Istdio 'int number = 10; int * pointer = &number; printf("%d\n%d\n", number, *pointer);'
crepl -Istdio 'int number = 10; int * pointer; pointer = &number; printf("%d\n%d\n", number, *pointer);'
crepl -Istdio 'struct { int a; int b;} my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); my_type* ptr = &my_struct; ptr->a = 7; printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); my_type* ptr = &my_struct; ptr->a = 7; printf("%d\n%d\n", ptr->a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); my_type* ptr = &my_struct; ptr->a = 7; printf("%d\n%d\n", (*ptr).a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); my_type* ptr = &my_struct; (*ptr).a = 7; printf("%d\n%d\n", (*ptr).a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); my_type* ptr = &my_struct; *(ptr).a = 7; printf("%d\n%d\n", (*ptr).a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); void increment (my_type* ptr) { ptr->a++; } increment(&my_struct);  printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); void increment (my_type* ptr) { ptr->a++; } my_type* pointer = &my_struct; increment(&my_struct);  printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); void increment (my_type* ptr) { ptr->a++; } my_type* pointer = &my_struct; increment(pointer);  printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { int a; int b;} my_type; my_type my_struct; my_struct.a = 5; my_struct.b = 10; printf("%d\n%d\n", my_struct.a, my_struct.b); void increment (my_type* ptr) { (*ptr).a++; } my_type* pointer = &my_struct; increment(pointer);  printf("%d\n%d\n", my_struct.a, my_struct.b);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr = &my_hash; printf("%s\n", my_hash.key); printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr = &my_hash; printf("%s\n", my_hash.key); (*ptr).key = "new value"; printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr = &my_hash; printf("%s\n", my_hash.key); ptr->key = "new value"; printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr = &my_hash; printf("%s\n", my_hash.key); my_hash.key = "new value"; printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr; ptr = &my_hash; printf("%s\n", my_hash.key); printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr; ptr = (hash*) &my_hash; printf("%s\n", ptr->key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; printf("%s\n", my_hash.key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash->key = "value"; printf("%s\n", my_hash.key);'
crepl -Istdio 'struct my_struct { int a; int b; }; struct my_struct test;'
crepl -Istdio 'struct my_struct { int a; int b; }; struct my_struct test; test.a=5; printf("%d\n", test.a);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr; ptr = (hash*) &my_hash; printf("%d\n", (int*) ptr->key);'
crepl -Istdio 'typedef struct { int x; int y; int z; } vector; vector vec; vec.y=5; printf("%d\n", vec.y);'
crepl -Istdio 'typedef struct { int x; int y; int z; } vector; vector vec; printf("%d\n", (int*) &(((vector*) 0)->x) );'
crepl -Istdio 'typedef struct { int x; int y; int z; } vector; vector vec; printf("%d\n", (int*) &(((vector*) 0)->y) );'
crepl -Istdio 'typedef struct { int x; int y; int z; } vector; vector vec; printf("%d\n", (int*) &(((vector*) 0)->z) );'
crepl -Istdio 'printf("%d\n", (int*) NULL);'
crepl -Istdio 'printf("%d\n", NULL);'
crepl -Istdio 'printf("%d\n", sizeof(char));'
crepl -Istdio 'printf("%d\n", sizeof(long long));'
crepl -Istdio 'printf("%d\n", sizeof(FILE));'
crepl -Istdio 'printf("%d\n", sizeof(int));'
crepl -Istdio 'printf("%d\n", sizeof(float));'
crepl -Istdio 'printf("%d\n", sizeof(double));'
crepl -Istdio 'printf("%d\n", sizeof(long));'
crepl -Istdio 'printf("%d\n", sizeof(void));'
crepl -Istdio 'printf("%d\n", sizeof(double*));'
crepl -Istdio 'printf("%d\n", sizeof(char*));'
crepl -Istdio 'printf("%d\n", sizeof(void*));'
crepl -Istdio 'printf("%d\n", sizeof(FILE*));'
crepl -Istdio 'typedef struct { char* line; } node; printf("%s\n", argv[0]);' arg1 arg2
crepl -Istdio 'typedef struct { char* line; } node; printf("%s\n", argv[1]);' arg1 arg2
crepl -Istdio,stdlib 'typedef struct { char* line; } node; FILE* FH=fopen(argv[1], "r"); if(FH == NULL) { printf("couldn'\''t open \"%s\"\n", argv[1]); exit(1); } char* line; while(1){ line=fgets(line, 128, FH); if(feof(FH)){break;} printf("%s", line); } ' wd
crepl -Istdio,stdlib 'typedef struct { char* line; struct node* next; } node; FILE* FH=fopen(argv[1], "r"); if(FH == NULL) { printf("couldn'\''t open \"%s\"\n", argv[1]); exit(1); } char* line; while(1){ line=fgets(line, 128, FH); if(feof(FH)){break;} printf("%s", line); } ' wd
crepl -Istdio,stdlib 'typedef struct { char line[32]; struct node* next; } node; node* head; printf("%d\n", sizeof(head) );'
crepl -Istdio,stdlib 'typedef struct { char line[32]; struct node* next; } node; node* head; printf("%d\n", sizeof(node) );'
crepl -Istdio,stdlib 'typedef struct { char* line; struct node* next; } node; node* head = malloc(sizeof(node)); if (head == NULL) {printf("error\n"); exit(1); } node* ptr = head; ptr->line = "line 1\n"; printf("%s", head->line);' wd
crepl -Istdio,stdlib 'struct node { char* line; struct node* next; }; typedef struct node node_t; node_t n1, n2, n3; node_t* head; n1.line="line 1\n"; n2.line="line 2\n"; n3.line="line 3\n"; head = &n1; n1.next = &n2; n2.next = &n3; n3.next = NULL; node_t* ptr = head; while(ptr != NULL){ printf("%s", ptr->line); ptr = ptr->next; }' wd
crepl -Istdio 'printf("%d\n", (int*) NULL);'
crepl -E -Istdio '' | grep extern
crepl -E -Istdio '' | grep extern | perl -e 'print sort { ($a =~ /\s+(\S+)\s+\(/)[0] cmp ($b =~ /\s+(\S+)\s+\(/)[0] } <>'
crepl -E -Istdio '' | grep extern | perl -e 'print sort { ($a =~ /\s+(\S+)\s+\(/)[0] cmp ($b =~ /\s+(\S+)\s+\(/)[0] } <>' | less
crepl -E -Istdio '' | grep extern | perl -e '$regex=/\s+\*?(\S+)\s+\(/;print sort { ($a =~ $regex)[0] cmp ($b =~ $regex)[0] } <>'
crepl -E -Istdio '' | grep extern | perl -e '$regex=/\s+\*?(\S+)\s+\(/;print sort { ($a =~ $regex)[0] cmp ($b =~ $regex)[0] } <>' | less
crepl -E -Istdio '' | grep extern | grep -v -e scanf -e 'printf' -e 'eof' -e 'open' -e 'fileno' -e 'seek' -e 'pos'  -e 'put' -e 'read' -e 'write' -e 'clear' -e 'error' -e 'get' -e 'tmp' -e 'set' -e 'close' -e 'tell' -e 'lock'
crepl -Istdio 'printf("sdbfhbd%%fhbhdfb\n");'
crepl -Istdio 'printf("sdbfhbd\%fhbhdfb\n");'
crepl -Istdio 'printf("%c\n", '\''c'\'');'
crepl -E -Istdio ''
crepl -E -Istdlib ''
crepl -E -Itermios ''
crepl -E -Iunistd '' | less
crepl -E -Ifcntl '' | less
crepl -E -Ifcntl '' | less
crepl -E -Isys/stat ''
crepl -E -Isys/stat ''
crepl -Istdio 'printf("\"%c\"\n", getchar());'
crepl -Istdio 'FILE* stdin=fopen("/dev/stdin","r"); char c; while (c = fgetc(stdin), c != 0) { printf("%c", c); }'
crepl -Istdio 'fclose(stdin);'
crepl -Istdio 'char c; while (c = getchar(), c != EOF) { printf("%c", c); } fclose(stdin);'
crepl -Istdio 'char c; while (c = getchar(), c != EOF) { printf("%c", c); } fclose(stdin); printf("\n");'
crepl -Istdio 'int c; c = getchar(); while (c != EOF) { printf("%c", c); c = getchar(); } printf("\n");'
crepl -Istdio 'int c; c = getchar(); while (c != EOF) { putchar(c); c = getchar(); } printf("\n");'
crepl -Istdio 'int c; c = getchar(); while (c != EOF) { putchar(c); c = getchar(); } fflush(NULL); printf("\n");'
crepl -Istdio 'int c; c = getchar(); while (c != EOF) { putchar(c); c = getchar(); } fflush(NULL); printf("\n");'
crepl -Istdio 'int level1(){ int x=1; int level2() { int x=2; printf("level2() %d\n", x); } printf("level1() %d\n", x); level2(); } level1();'
crepl -Istdio 'int level1(){ int x=1; int level2() { int x=2; printf("level2() %d\n", x); } level2(); } level1();'
crepl -Istdio 'int level1(){ int x=1; int level2() { printf("level2() %d\n", x); } level2(); } level1();'
crepl -Istdio 'int level1(){ int x=1; int level2() { int x=2; int level3() { printf("level3() %d\n", x); } level3(); } level2(); } level1();'
crepl -Istdio 'int level1(){ int x=1; int level2() { int level3() { printf("level3() %d\n", x); } level3(); } level2(); } level1();'
crepl -Istdio 'int level1(){ int x=1; int level2() { int x=2; int level3() { printf("level3() %d\n", x); } level3(); } level2(); } level1();'
crepl -Istdio 'int level1(){ int x=1; int level2() { int x=2; int level3() { int x=3; printf("level3() %d\n", x); } level3(); } level2(); } level1();'
crepl -Istdio 'int x=0; int level1(){ int x=1; int level2() { int x=2; int level3() { printf("level3() %d\n", x); } level3(); } level2(); } level1();'
crepl -Istdio 'int i=5; for(int i=0; i< 0; i++){  } printf("%d\n", i);'
crepl -Istdio 'int i=5; for(i=0; i< 10; i++){  } printf("%d\n", i);'
crepl -Istdio 'for(int i=0; i< 0; i++){  } printf("%d\n", i);'
crepl -Istdio 'if (1) { int i=5; } printf("%d\n", i);'
crepl -Istdio 'int i=3; if (1) { int i=5; } printf("%d\n", i);'
crepl -Istdio 'for(int i=0; i< 0; i++){ int j=7;  } printf("%d\n", j);'
crepl -Istdio 'int j=8; for(int i=0; i< 0; i++){ int j=7;  } printf("%d\n", j);'
crepl -Istdio 'int j=8; for(int i=0; i< 0; i++){ int j; j=i+2;  } printf("%d\n", j);'
crepl -Istdio 'if (1) { int i=1; } else if(1) { int i=2; } else { int i=3; } '
crepl -Istdio 'int factorial (int n) { if (n <= 1) { return 1; } else { return n * factorial(n-1); } } printf("%d\n", factorial(5));'
crepl -Istdio 'int factorial (int n) { if (n <= 1) { return 1; } else { return n * factorial(n-1); } } printf("%d\n", factorial(5));'
crepl -Istdio 'long number=1000000000; printf("%ld\n", number);'
crepl -Isys/ioctl -E ''
crepl -Iasm/ioctl -E ''
crepl -E -Ielf ''
crepl -E -Ielf '' | less
crepl -Istdio,math 'printf("%f\n", cos(0));'
crepl -Istdio,math 'printf("%f\n", cos(3.14));'
crepl -Istdio,math 'printf("%f\n", cos(3.14/2));'
crepl -Istdio,math 'printf("%f\n", cos(3.14159265/2));'
crepl -Istdio,stdlib,wordexp 'char* words="word1 word2  word3"; printf("%s\n", words);  wordexp_t p; char **w; wordexp("[a-c]*.c", &p, 0); w = p.we_wordv; for (int i = 0; i < p.we_wordc; i++) printf("%s\n", w[i]);  wordfree(&p); exit(EXIT_SUCCESS);'
crepl -Istdio,stdlib,wordexp 'char* words="word1 word2  word3"; printf("%s\n", words);  wordexp_t p; char **w; wordexp(words, &p, 0); w = p.we_wordv; for (int i = 0; i < p.we_wordc; i++) printf("%s\n", w[i]);  wordfree(&p); exit(EXIT_SUCCESS);'
crepl -Istdio,stdlib,wordexp 'char* words="word1 word2  word3"; printf("%s\n", words);  wordexp_t p; char **w; wordexp(words, &p, 0); w = p.we_wordv; for (int i = 0; i < p.we_wordc; i++) printf("%s\n", w[i]);  wordfree(&p); exit(EXIT_SUCCESS);'
crepl -Istdio 'printf("%d\n", 2 == 2 <= 3);'
crepl -Istdio 'if(NULL){printf("false\n");}else{printf("false\n");}'
crepl -Istdio 'if(0){printf("false\n");}else{printf("false\n");}'
crepl -Istdio 'if(-0){printf("false\n");}else{printf("false\n");}'
crepl -Istdio 'if(-0.1){printf("false\n");}else{printf("false\n");}'
crepl -Istdio 'if(10){printf("false\n");}else{printf("false\n");}'
crepl -Istdio 'if(1){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(0){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(NULL){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(0.1){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if("0"){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(""){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if(-1){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if('\''0'\''){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if('\''\0'\''){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if("\0"){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'if('\''\0'\''){printf("true\n");}else{printf("false\n");}'
crepl -Istdio 'typedef int my_struct; my_struct var = 10; printf("%d\n", var);'
crepl -Istdio 'for(int i=0;i<1000000; i++) { printf("%d", i); }'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { ; } printf("%c", c[0]);'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { ; } printf("%s", c[0]);'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { ; } printf("%c", c[0]);'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { printf("%c", c[0]); }'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { printf("%c", c[i]); }'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { printf("%c", c[i]); }'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { c[i] != '\''\0'\'' ? printf("%c", c[i]) : printf("\n") ; }'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { c[i] != '\''\0'\'' ? printf("%c", c[i]) : printf("\n") ; }' | less
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { c[i] != '\''\0'\'' ? printf("%c", c[i]) : printf("\n") ; }' | vipe
crepl -Istdio 'char c[1] = "0"; for(long i=0;i<1000000; i++) { c[i] != '\''\0'\'' ? printf("%c", c[i]) : printf("\n") ; }'
crepl -Istdio 'char c[1] = "0"; for(int i=0;i<1000000; i++) { c[i] != '\''\0'\'' ? printf("%c", c[i]) : printf("\n") ; }'
crepl -Istdio,math 'printf("%f\n", M_E);'
crepl -Istdio,math 'printf("%f\n", M_PI);'
crepl -Istdio,math 'printf("%f\n", sin(M_PI_2));'
crepl -Istdio,math 'printf("%f\n", NAN);'
crepl -Istdio,math 'printf("%d\n", NAN);'
crepl -Istdio,stdlib 'char *var="string"; printf("%c\n", var[0]);'
crepl -Istdio,stdlib 'char *var="string"; printf("%s\n", var[0]);'
crepl -Istdio,stdlib 'char *var="string"; printf("%s\n", var);'
crepl -Istdio,string 'char * string="abcde;fgh"; printf("%s\n", string); char * ptr = memchr(string, '\''b'\'', 2); printf("%s\n", ptr);'
crepl -Istdio,string 'char * string="abcde;fgh"; printf("%s\n", string); char * ptr = memchr(string, '\''b'\'', 2); printf("%c\n", ptr[0]);'
crepl -Istdio,string 'char * string="abcde;fgh"; printf("%s\n", string); char * ptr = memchr(string, '\''b'\'', 2); printf("%s\n", ptr);'
crepl -Istdio,math 'printf("%f\n", sqrtf(2));'
time crepl -Istdio,math 'printf("%f\n", sqrtf(2));'
crepl -Istdio 'switch (2) { case 1 : printf("one\n"); break; case 2 : printf("two\n"); case 3 : printf("three\n"); break; case 4 : printf("four\n"); break;  }'
crepl -Istdio 'switch (2) { case 1 : printf("one\n"); break; case 2 : printf("two\n"); break; case 3 : printf("three\n"); break; case 4 : printf("four\n"); break;  }'
crepl -Istdio 'switch (2) { case 1 : printf("one\n"); break; case 2 : case 3 : printf("three\n"); break; case 4 : printf("four\n"); break;  }'
crepl -Istdio 'if (1) printf("true\n");'
crepl -Istdio 'if (1) { printf("true\n"); } else { printf("false\n"); }'
crepl -Istdio 'if (1) printf("true\n"); else { printf("false\n"); }'
crepl -Istdio 'if (0) printf("true\n"); else { printf("false\n"); }'
crepl -Istdio 'if (0) printf("true\n"); else printf("false\n");'
crepl -Istdio 'if (0) printf("true\n"); else if (1) printf("true 2\n"); else printf("false\n");'
crepl -Istdio 'if (0) printf("true\n"); else if (1) { printf("true 2\n"); } else printf("false\n");'
crepl -Istdio 'for(;;) {printf("infinite loop\n"); }'
crepl -Istdio 'for(;1;) {printf("infinite loop\n"); }'
crepl -Istdio 'unsigned var = 0; printf("%d\n", var);'
crepl -Istdio 'unsigned var = 1000000000; printf("%d\n", var);'
crepl -Istdio 'unsigned var = 10000000000; printf("%d\n", var);'
crepl -Istdio 'int var = 1000000000; printf("%d\n", var);'
crepl -Istdio 'unsigned var = 1000000000; printf("%d\n", var);'
crepl -Istdio 'unsigned var = 10000000000; printf("%d\n", var);'
crepl -Istdio 'int var = 10000000000; printf("%d\n", var);'
crepl -Istdio 'int var = 10; printf("%d\n%d\n", var, &var);'
crepl -Istdio 'int var = 10; int* ptr=&var; printf("%d\n%d\n%d\n", var, &var, ptr);'
crepl -Istdio 'int var = 10; int* ptr=&var; printf("%d\n%d\n%d\n%d\n", var, &var, ptr, *ptr);'
crepl -Istdio 'int var = 10; int *ptr=&var; int *ptr2=ptr; printf("%d\n%d\n%d\n%d\n%d\n%d\n", var, &var, ptr, *ptr, ptr2, *ptr2);'
crepl -Istdio 'char var = 10; int *ptr= (int*) &var; printf("%d\n%d\n%d\n%d\n", var, &var, ptr, (char*) ptr);'
crepl -Istdio 'char var = 10; int *ptr= (int*) &var; printf("%d\n%d\n%d\n%d\n", var, &var, ptr, (char) *ptr);'
crepl -Istdio 'if ("str") { printf("true\n"); } else { printf("false\n"); }'
crepl -Istdio 'if ('\''\0'\'') { printf("true\n"); } else { printf("false\n"); }'
crepl -Istdio 'if ('\''0'\'') { printf("true\n"); } else { printf("false\n"); }'
crepl -Istdio 'if ('\'':'\'') { printf("true\n"); } else { printf("false\n"); }'
crepl -Istdio 'int i = 0; while (i <= 10) { printf("%d\n", i); i++; if (i == 4) { break; } }'
crepl -Istdio 'switch (2) { case 1 : printf("one\n"); break; case 2 : printf("two\n"); case 3 : printf("three\n"); break; case 4 : printf("four\n"); break;  }'
crepl -Istdio 'printf("%s\n", __DATE__);'
crepl -Istdio 'printf("%s\n", __TIME__);'
crepl -Istdio 'printf("%s\n", __FILE__);'
crepl -Istdio 'printf("%d\n", __LINE__);'
crepl -Istdio 'printf("%d\n", __STDC__);'
crepl -Istdio 'enum week{sunday, monday, tuesday, wednesday, thursday, friday, saturday}; enum week var;  printf("%d\n", friday);'
crepl -Istdio 'enum week{Mon=10, Tue, Wed, Thur, Fri=10, Sat=16, Sun}; enum day{Mond, Tues, Wedn, Thurs, Frid=18, Satu=11, Sund}; printf("The value of enum week:\t\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",Mon , Tue, Wed, Thur, Fri, Sat, Sun); printf("The default value of enum day:\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",Mond , Tues, Wedn, Thurs, Frid, Satu, Sund);'
crepl -Istdio 'enum week{Mon=10, Tue, Wed, Thur, Fri=10, Sat=16, Sun}; enum day{Mond, Tues, Wedn, Thurs, Frid=18, Satu=11, Sund}; printf("The value of enum week:\t\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",Mon , Tue, Wed, Thur, Fri, Sat, Sun); printf("The default value of enum day:\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",Mond , Tues, Wedn, Thurs, Frid, Satu, Sund); enum week day; printf("%d\n", day);'
crepl -Istdio 'enum week{Mon=10, Tue, Wed, Thur, Fri=10, Sat=16, Sun}; enum day{Mond, Tues, Wedn, Thurs, Frid=18, Satu=11, Sund}; printf("The value of enum week:\t\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",Mon , Tue, Wed, Thur, Fri, Sat, Sun); printf("The default value of enum day:\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",Mond , Tues, Wedn, Thurs, Frid, Satu, Sund); enum week day; printf("%d\n", ++day);'
crepl -Istdio 'printf("%d\n", NULL);'
crepl 'printf("hello\n");'
crepl 'struct { int i; int j; } var; var.i = 3; printf("%d\n", var.i);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr; ptr = &my_hash; printf("%s\n", my_hash.key); printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl -Istdio 'typedef struct { char* key; } hash; hash my_hash; my_hash.key = "value"; hash* ptr = &my_hash; printf("%s\n", my_hash.key); printf("%s\n%s\n", ptr->key, (*ptr).key);'
crepl 'struct { int i; char c; } var; var.i=4; var.c='\''e'\''; printf("%c\n",var.c);'
crepl 'typedef struct { int i; char c; } my_struct; my_struct var; var.i=4; var.c='\''e'\''; printf("%c\n",var.c); void modify(my_struct* str) { str->c='\''r'\''; } printf("%c\n", var.c); modify(&var); printf("%c\n", var.c);'
crepl 'typedef struct { int i; char c; } my_struct; my_struct var; var.i=4; var.c='\''e'\''; printf("%c\n",var.c); void modify(my_struct str) { str.c='\''r'\''; } printf("%c\n", var.c); modify(var); printf("%c\n", var.c);'
crepl 'typedef struct { int i; char c; } my_struct; my_struct var; var.i=4; var.c='\''e'\''; printf("%c\n",var.c); void modify(my_struct str) { printf("modify\t%c\n", str.c); } printf("%c\n", var.c); modify(var); printf("%c\n", var.c);'
crepl -Istring 'char* str="abc"; char* res=strtok(str, "b"); '
crepl -Istring 'char* str="abc"; char* res=strtok(str, " "); '
crepl -Istring 'char* str="abc"; char* res=strtok(str, " "); printf("%s\n", res);'
crepl 'int *list={3,4,5}; '
crepl 'int list[]={3,4,5}; for (int i=0; i < 3; i++) { printf("%d\n", list[i]); }'
crepl 'int list[]={3,4,5}; printf("%d\n", sizeof(list[0]) ); '
crepl 'int list[]={3,4,5}; printf("%d\n", sizeof(list) ); '
crepl 'int list[]={3,4,5}; printf("%d\n", (sizeof(list[0])/sizeof(list)) ); '
crepl 'int list[]={3,4,5}; printf("%d\n", (sizeof(list)/sizeof(list[0])) ); '
crepl 'int list[]={3,4,5}; for (int i=0; i < sizeof(list)/sizeof(list[0]); i++) { printf("%d\n", list[i]); }'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][0]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][1]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][2]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][3]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][4]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][5]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[0][6]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[1][0]);'
crepl 'int list[][3]={{1,2,3},{4},{5}}; printf("%d\n", list[2][0]);'
crepl 'printf("%d\n", 0 << 4 );'
crepl 'printf("%d\n", 0 >> 4 );'
crepl 'printf("%d\n", 1 >> 4 );'
crepl 'printf("%d\n", 1 << 4 );'
crepl 'printf("%d\n", 1 << 0 );'
crepl 'printf("%d\n", 1 >> 0 );'
crepl 'printf("%d\n", 1 >> 1 );'
crepl 'printf("%d\n", 3 >> 1 );'
crepl 'printf("%d\n", (3 >> 1) << 1 );'
crepl -Iunistd 'if (!isatty(0)) { printf("there is stdin\n"); } else { printf("no stdin\n"); } '
ls | crepl -Iunistd 'if (!isatty(0)) { printf("there is stdin\n"); } else { printf("no stdin\n"); } '
crepl 'puts("line");'
crepl 'FILE *stdout=fdopen(1, "w"); fputs("line", stdout);'
crepl 'FILE *stdout=fdopen(1, "w"); fputs("line", stdout);'
crepl 'FILE *stdout=fdopen(1, "w"); fputs("line", stdout);'
cat wd | crepl -Istdlib 'FILE *stdout=fdopen(1, "w"); if (stdout==NULL) exit(1); FILE *stdin=fdopen(0, "r"); if (stdin==NULL) exit(1); char line[1024]; while(!feof(stdin)) { fgets(line, 512, stdin); printf("%s", line); }'
crepl 'char c[]="text"; char *ptr=c; '
crepl 'char c[]="text"; char *ptr; ptr=c; '
crepl 'char c[]="text"; char *ptr; ptr=&c; ' # ERROR
crepl 'char *c="string"; printf("%s\n", c);'
crepl 'char c[]="string"; printf("%s\n", c);'
crepl 'char c[]="string"; c[0]='\''A'\''; printf("%s\n", c);'
crepl 'char *c="string"; c[0]='\''A'\''; printf("%s\n", c);'
crepl 'char *c="string"; *c='\''A'\''; printf("%s\n", c);'
crepl 'char c[]="string";  *c='\''A'\''; printf("%s\n", c);'
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); char bytes[4]; read(fileno(file), bytes, 4); printf("%s\n", bytes);' colocation.mp3 
crepl 'printf("%d\n", sizeof(int));'
crepl 'printf("%d\n", sizeof(char));'
crepl 'printf("%d\n", sizeof(short));'
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); char bytes[4]; read(fileno(file), bytes, 4); printf("%s\n", bytes); typedef struct { short first; short second; } two_shorts; two_shorts *head; head = (two_shorts*) bytes; printf("%d\n%d\n", head->first, head->second);' colocation.mp3 
crepl -Istdio 'char * str="text"; char * copy; int i=0; while(str[i] != '\''\0'\''){copy[i]=str[i]; i++;} printf("%s\n", copy);'
crepl -Istdio 'char * str="text"; char copy[50]; int i=0; while(str[i] != '\''\0'\''){copy[i]=str[i]; i++;} printf("%s\n", copy);'
crepl -Iid3tag 'struct id3_frame frame;'
crepl -Iid3tag 'printf("%d\n", sizeof(struct id3_frame));'
crepl -Iid3tag 'printf("%d\n", sizeof(struct id3_tag));'
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); struct header { char id3[3]; char version[2]; char flags; int size; }; struct header header; read(fileno(file), &header, sizeof(struct header)); for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", header.flags & (1 << i)); }' 02\ Whatever\ You\ Like\ (Single\ Version).mp3 
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); struct header { char id3[3]; char version[2]; char flags; int size; }; struct header header; read(fileno(file), &header, sizeof(struct header)); for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", (header.id3[2] & (1 << i)) >> i); }' 02\ Whatever\ You\ Like\ (Single\ Version).mp3 
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); struct header { char id3[3]; char version[2]; char flags; int size; }; struct header header; read(fileno(file), &header, sizeof(struct header)); for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", header.id3[2] & (1 << i)); }' 02\ Whatever\ You\ Like\ (Single\ Version).mp3 
crepl 'for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", 0x33 & (1 << i)); }'
crepl 'for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", (0x33 & (1 << i)) >> i ); }'
crepl 'for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", 0x33 & (1 << i)); }'
crepl -Istdint 'uint8_t a = 0x33; for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", ( a >> i) & 0x1 ); }'
crepl -Istdint 'uint8_t a = 0x33; for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", ( 0x33 >> i) & 0x1 ); }'
crepl 'for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", ( 0x33 >> i) & 0x1 ); }'
crepl 'for (int i=0; i < 8; i++) { printf("bit %d\n", i); printf("%d\n", ( 0x33 >> i) & 1 ); }'
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); struct header { char id3[3]; char version[2]; char flags; int size; }; struct header header; read(fileno(file), &header, sizeof(struct header)); void print_binary(char byte) { for (int i=7; i >= 0; i--) { printf("%d", (byte >> i) & 1 ); } printf("\n"); } printf("%s\n", header.id3); printf("%d %d\n", header.version[0], header.version[1]); print_binary(header.flags); printf("%d\n", header.size);' colocation.mp3 
crepl 'struct X { short s; int i; char c; }; struct Y { int i; char c; short s; }; struct Z { int i; short s; char c; }; printf("sizeof(struct X) %d\n", sizeof(struct X)); printf("sizeof(struct Y) %d\n", sizeof(struct Y)); printf("sizeof(struct Z) %d\n", sizeof(struct Z));'
crepl 'struct mystruct { int a; char *str; char c; }; struct mystruct structure = { 5, "abcde", '\''F'\'' }; printf(" structure.a = %i\n structure.str = %s\n structure.c = %c\n", structure.a, structure.str, structure.c);'
crepl 'struct mystruct { int a; char *str; char c; }; struct mystruct structure = { 5, "abcde", '\''F'\'' }; printf(" structure.a   = %i\n structure.str = %s\n structure.c   = %c\n", structure.a, structure.str, structure.c);'
crepl 'printf("%d\n", sizeof(char));'
crepl 'printf("%d\n", sizeof(char *));'
crepl 'printf("%d\n", sizeof(int *));'
crepl 'printf("%d\n", sizeof(long *));'
crepl 'struct test { int a; int b; char c; char d; float f; }; printf("%d\n", sizeof(struct test));'
crepl 'struct test { char a[3]; char b[2]; char c; char d[4]; }; printf("%d\n", sizeof(struct test));'
crepl 'struct test { char a[3]; char b[2]; char c; int d; }; printf("%d\n", sizeof(struct test));'
crepl 'struct __attribute__((__packed__)) test { char a[3]; char b[2]; char c; int d; }; printf("%d\n", sizeof(struct test));'
crepl -Istdlib,unistd 'FILE *file=fopen(argv[1], "r"); if (file==NULL) exit(1); struct __attribute__((__packed__)) header { char id3[3]; char version[2]; char flags; int size; }; struct header header; read(fileno(file), &header, sizeof(struct header)); void print_binary(char byte) { for (int i=7; i >= 0; i--) { printf("%d", (byte >> i) & 1 ); } printf("\n"); } printf("%s\n", header.id3); printf("%d %d\n", header.version[0], header.version[1]); print_binary(header.flags); printf("%d\n", header.size);' colocation.mp3 
crepl 'struct test { char a; }; printf("%d\n", sizeof(struct test));'
crepl 'struct test { short a; }; printf("%d\n", sizeof(struct test));'
crepl 'struct test { char a; int * b; }; printf("%d\n", sizeof(struct test));'
crepl 'int i = 5; int *ptr = &i+1; printf("%d\n", *ptr); printf("%ld\n", &ptr);'
crepl 'struct test { char a; char b; }; printf("%d\n", sizeof(struct test));'
crepl 'struct test { short a; char b; }; printf("%d\n", sizeof(struct test));'
crepl 'enum { ONE = 1, TWO, THREE }; printf("%d %d %d\n", ONE, TWO, THREE);'
crepl -Istdlib 'printf("%s\n", getenv("PWD"));'
crepl -Ifcntl 'printf(" O_RDONLY\t%d\n O_WRONLY\t%d\n O_RDWR\t\t%d\n O_CREAT\t%d\n O_TRUNC\t%d\n O_APPEND\t%d\n", O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, O_TRUNC, O_APPEND);'
crepl -Istdint 'uint8_t a = 0x33; for (int i=7; i >= 0; i--) { printf("%d", ( 0x33 >> i) & 0x1 ); } printf("\n");'
crepl -Istdint 'uint8_t num = 0x01; for (int i=7; i >= 0; i--) { printf("%d", ( num >> i) & 0x1 ); } printf("\n");'
crepl -Istdint 'uint8_t num = 0xFF; for (int i=7; i >= 0; i--) { printf("%d", ( num >> i) & 0x1 ); } printf("\n");'
crepl -Istdint 'uint8_t num = 0x80; for (int i=7; i >= 0; i--) { printf("%d", ( num >> i) & 0x1 ); } printf("\n");'
crepl -Istdint 'uint8_t num = 0x80; printf("0b"); for (int i=7; i >= 0; i--) { printf("%d", ( num >> i) & 0x1 ); } printf("\n");'
crepl -Iiconv 'iconv_t cd = iconv_open("UTF-8", "UTF-8"); '
crepl 'typedef struct { int a; char c; } mystruct_t; mystruct_t mystruct = { 5, '\''D'\'' }; void function (mystruct_t* my) { my->c = '\''L'\''; } printf("%d  %c\n", mystruct.a, mystruct.c); function(&mystruct); printf("%d  %c\n", mystruct.a, mystruct.c);'
crepl -Isys/stat 'struct stat statbuf; const char *path="/home/london/wd"; stat(path, &statbuf); printf("%d\n", statbuf.st_size);'
crepl -Isys/stat,ftw 'struct stat statbuf; int callback(const char *fpath, const struct stat *sb, int typeflag){ printf("%d\n", sb->st_size); return 0; } int res=ftw( "/home/london/web", callback, 1024 ); '
time crepl -Isys/stat,ftw 'struct stat statbuf; int callback(const char *fpath, const struct stat *sb, int typeflag){ printf("%d\n", sb->st_size); return 0; } int res=ftw( "/home/london/web", callback, 1024 ); '
crepl -Isys/stat,ftw 'struct stat statbuf; int callback(const char *fpath, const struct stat *sb, int typeflag){ printf("%s\n", fpath); return 0; } int res=ftw( "/home/london/web", callback, 1024 ); ' | wc
