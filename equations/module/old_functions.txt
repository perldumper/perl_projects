sub mark_nodes3 {
	my $equation = shift;
	my $id = 0;

	sub tree_walk2 {
		my $node = shift;
		my $id = shift;
		$node->{id} = $id;
		$id++;
		if ($node->{type} eq "binary_op") { # node has children
			$id = tree_walk2($node->{left}, $id);
			$id = tree_walk2($node->{right}, $id);
		}
		elsif ($node->{type} eq "unary_op") { # node has children
			$id = tree_walk2($node->{operand}, $id);
		}
		return $id
	}
# 	tree_walk2($equation->{trees}->{left_side}, $id);
# 	tree_walk2($equation->{trees}->{right_side}, $id);
	$id = tree_walk2($equation->{trees}->{left_side}, $id);
	tree_walk2($equation->{trees}->{right_side}, $id);
}


sub mark_nodes2 {
	my $equation = shift;
	our $id = 0;	# global variable within the enclosing block, get reset to 0 for each equation
# 	my $id = 0;		# not reset, the nodes id of the next equation don't start at 0

# 	print "make_nodes2";
# 	print Dumper $equation;

	sub tree_walk {
		my $node = shift;
		$node->{id} = $id;
		$id++;
		if ($node->{type} eq "binary_op") { # node has children
			tree_walk($node->{left});
			tree_walk($node->{right});
		}
		elsif ($node->{type} eq "unary_op") { # node has children
			tree_walk($node->{operand});
		}
	}
	tree_walk($equation->{trees}->{left_side});
	tree_walk($equation->{trees}->{right_side});
}


sub mark_nodes {
	# visit all the nodes
	my $equation = shift;
	my $left_expression  = $equation->{trees}->{left_side};
	my $right_expression = $equation->{trees}->{right_side};
	my @stack_tree_walk;
	my $node;
	my $id = 0;
	
	foreach my $expression ($left_expression, $right_expression) {
		@stack_tree_walk = ();
		$node = $expression;
		push @stack_tree_walk, {$node->%*, left_visited => 0, side=> "left", id_set=> 0};
		while(@stack_tree_walk) {

			unless ($stack_tree_walk[-1]->{id_set}) {	# unless $node->{id_set} wouldn't have worked
				$node->{id}     = $id;					# modify actual node by reference
				$stack_tree_walk[-1]->{id_set} = 1;		# $node->{id_set} = 1 wouldn't have worked, because next time the node
														# is visited by moving back up the tree and the value of id_set read,
														# $node would have come from the stack copy which was copied before
														# that the key id_set would have been set to 1
				$id++;
			}

			if ($node->{type} eq "binary_op") {			# interior node
				
				if (not $stack_tree_walk[-1]->{left_visited}) {
					$node = $node->{left};
					$stack_tree_walk[-1]->{left_visited} = 1;
					push @stack_tree_walk, {$node->%*, left_visited => 0, side=> "left", id_set=> 0};
				}
				elsif ($node->{side} eq "left") {
					$node = $node->{right};
					$stack_tree_walk[-1]->{side} = "right";
					push @stack_tree_walk, {$node->%*, left_visited => 0, side=> "left", id_set=> 0};
				}
				else {
					pop @stack_tree_walk;
					$node = $stack_tree_walk[-1];
				}
			}
			elsif ($node->{type} eq "unary_op") {
				if (not $stack_tree_walk[-1]->{operand_visited}) {
					$node = $node->{operand};
					$stack_tree_walk[-1]->{operand_visited} = 1;
					push @stack_tree_walk, {$node->%*, operand_visited => 0, id_set=> 0};
				}
				else {
					pop @stack_tree_walk;
					if (@stack_tree_walk) {
						$node = $stack_tree_walk[-1];
					}
				}
			}
			else {										# leaf
				pop @stack_tree_walk;
				if (@stack_tree_walk) {					# empty stack at the end, when both left and right subtrees of root node
					$node = $stack_tree_walk[-1];		#   have been visited
				}
			}
		}
	}
}




